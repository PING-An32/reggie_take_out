Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.4.5</version>\r\n        <relativePath/> <!-- lookup parent from repository -->\r\n    </parent>\r\n    <groupId>com.itheima</groupId>\r\n    <artifactId>reggie_take_out</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <properties>\r\n        <java.version>1.8</java.version>\r\n    </properties>\r\n    <dependencies>\r\n        <!--阿里云短信服务-->\r\n        <dependency>\r\n            <groupId>com.aliyun</groupId>\r\n            <artifactId>aliyun-java-sdk-core</artifactId>\r\n            <version>4.5.16</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.aliyun</groupId>\r\n            <artifactId>aliyun-java-sdk-dysmsapi</artifactId>\r\n            <version>2.1.0</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter</artifactId>\r\n            <version>2.4.5</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-redis</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-cache</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-test</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n            <scope>compile</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.baomidou</groupId>\r\n            <artifactId>mybatis-plus-boot-starter</artifactId>\r\n            <version>3.4.2</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.20</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>fastjson</artifactId>\r\n            <version>1.2.76</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>commons-lang</groupId>\r\n            <artifactId>commons-lang</artifactId>\r\n            <version>2.6</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid-spring-boot-starter</artifactId>\r\n            <version>1.1.23</version>\r\n        </dependency>\r\n\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n                <version>2.4.5</version>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision b1e1a677ace81052e2312367d8acd895a813d719)
+++ b/pom.xml	(date 1718113401730)
@@ -28,6 +28,11 @@
             <version>2.1.0</version>
         </dependency>
 
+        <dependency>
+            <groupId>com.github.xiaoymin</groupId>
+            <artifactId>knife4j-spring-boot-starter</artifactId>
+            <version>3.0.2</version>
+        </dependency>
         <dependency>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-starter</artifactId>
Index: src/main/java/com/itheima/reggie/config/WebMvcConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.itheima.reggie.config;\r\n\r\nimport com.itheima.reggie.common.JacksonObjectMapper;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.http.converter.HttpMessageConverter;\r\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\r\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\r\n\r\nimport java.util.List;\r\n\r\n@Slf4j\r\n@Configuration\r\npublic class WebMvcConfig extends WebMvcConfigurationSupport {\r\n    /**\r\n     * 设置静态资源映射\r\n     * @param registry\r\n     */\r\n    @Override\r\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        log.info(\"开始进行静态资源映射...\");\r\n        registry.addResourceHandler(\"/backend/**\").addResourceLocations(\"classpath:/backend/\");\r\n        registry.addResourceHandler(\"/front/**\").addResourceLocations(\"classpath:/front/\");\r\n    }\r\n\r\n    /**\r\n     * 扩展mvc框架的消息转换器\r\n     * @param converters\r\n     */\r\n    @Override\r\n    protected void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\r\n        log.info(\"扩展消息转换器...\");\r\n        //创建消息转换器对象（把R对象转换成JSON）\r\n        MappingJackson2HttpMessageConverter messageConverter = new MappingJackson2HttpMessageConverter();\r\n        //设计对象转换器，底层使用Jackson将Java对象转为json\r\n        messageConverter.setObjectMapper(new JacksonObjectMapper());\r\n        converters.add(0,messageConverter);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/itheima/reggie/config/WebMvcConfig.java b/src/main/java/com/itheima/reggie/config/WebMvcConfig.java
--- a/src/main/java/com/itheima/reggie/config/WebMvcConfig.java	(revision b1e1a677ace81052e2312367d8acd895a813d719)
+++ b/src/main/java/com/itheima/reggie/config/WebMvcConfig.java	(date 1718113401735)
@@ -1,17 +1,28 @@
 package com.itheima.reggie.config;
 
+import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j;
 import com.itheima.reggie.common.JacksonObjectMapper;
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
+import springfox.documentation.builders.ApiInfoBuilder;
+import springfox.documentation.builders.PathSelectors;
+import springfox.documentation.builders.RequestHandlerSelectors;
+import springfox.documentation.service.ApiInfo;
+import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spring.web.plugins.Docket;
+import springfox.documentation.swagger2.annotations.EnableSwagger2;
 
 import java.util.List;
 
 @Slf4j
 @Configuration
+@EnableKnife4j
+@EnableSwagger2
 public class WebMvcConfig extends WebMvcConfigurationSupport {
     /**
      * 设置静态资源映射
@@ -20,6 +31,9 @@
     @Override
     protected void addResourceHandlers(ResourceHandlerRegistry registry) {
         log.info("开始进行静态资源映射...");
+
+        registry.addResourceHandler("doc.html").addResourceLocations("classpath:/META-INF/resources/");
+        registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/");
         registry.addResourceHandler("/backend/**").addResourceLocations("classpath:/backend/");
         registry.addResourceHandler("/front/**").addResourceLocations("classpath:/front/");
     }
@@ -37,4 +51,23 @@
         messageConverter.setObjectMapper(new JacksonObjectMapper());
         converters.add(0,messageConverter);
     }
+
+    @Bean
+    public Docket createRestApi(){
+        //文档类型
+        return new Docket(DocumentationType.SWAGGER_2)
+                .apiInfo(apiInfo())
+                .select()
+                .apis(RequestHandlerSelectors.basePackage("com.itheima.reggie.controller"))
+                .paths(PathSelectors.any())
+                .build();
+    }
+
+    private ApiInfo apiInfo(){
+        return new ApiInfoBuilder()
+                .title("瑞吉外卖")
+                .version("1.0")
+                .description("瑞吉外卖接口文档")
+                .build();
+    }
 }
Index: src/main/java/com/itheima/reggie/filter/LoginCheckFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.itheima.reggie.filter;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.itheima.reggie.common.BaseContext;\r\nimport com.itheima.reggie.common.R;\r\nimport jdk.nashorn.internal.ir.CallNode;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.util.AntPathMatcher;\r\n\r\nimport javax.servlet.*;\r\nimport javax.servlet.annotation.WebFilter;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * 检查用户是否已经完成登录\r\n */\r\n@WebFilter(filterName=\"loginCheckFilter\",urlPatterns = \"/*\")\r\n@Slf4j\r\npublic class LoginCheckFilter implements Filter {\r\n    //路径匹配器，支持通配符\r\n    public static final AntPathMatcher PATH_MATCHER = new AntPathMatcher();\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\r\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\r\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\r\n\r\n        String requestURI = request.getRequestURI();\r\n\r\n        log.info(\"拦截到请求：{}\",requestURI);\r\n        //定义不需要处理的请求路径\r\n        String[] urls = new String[]{\r\n                \"/employee/login\",\r\n                \"/employee/logout\",\r\n                \"/backend/**\",\r\n                \"/front/**\",\r\n                \"/common/**\",\r\n                \"/user/sendMsg\",\r\n                \"/user/login\"\r\n        };\r\n\r\n        boolean check = check(urls, requestURI);\r\n\r\n        if (check) {//不需要处理直接放行\r\n            log.info(\"本次请求{}不需要处理\",requestURI);\r\n            filterChain.doFilter(request, response);\r\n            return;\r\n        }\r\n\r\n        //4-1若已登录，直接放行\r\n        if (request.getSession().getAttribute(\"employee\")!=null) {\r\n            log.info(\"用户已登录，用户id为:{}\",request.getSession().getAttribute(\"employee\"));\r\n\r\n            Long empId = (Long)request.getSession().getAttribute(\"employee\");\r\n            BaseContext.setCurrentId(empId);\r\n\r\n            filterChain.doFilter(request,response);\r\n            return;\r\n        }\r\n        //4-2若已登录，直接放行\r\n        if (request.getSession().getAttribute(\"user\")!=null) {\r\n            log.info(\"用户已登录，用户id为:{}\",request.getSession().getAttribute(\"user\"));\r\n\r\n            Long userId = (Long)request.getSession().getAttribute(\"user\");\r\n            BaseContext.setCurrentId(userId);\r\n\r\n            filterChain.doFilter(request,response);\r\n            return;\r\n        }\r\n\r\n        log.info(\"用户未登录\");\r\n        //通过输出流向客户端页面响应数据，由前端跳转\r\n        response.getWriter().write(JSON.toJSONString(R.error(\"NOTLOGIN\")));\r\n        return;\r\n    }\r\n\r\n    public boolean check(String[] urls,String requestURI) {\r\n        for (String url : urls) {\r\n            boolean match = PATH_MATCHER.match(url, requestURI);\r\n            if (match) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/itheima/reggie/filter/LoginCheckFilter.java b/src/main/java/com/itheima/reggie/filter/LoginCheckFilter.java
--- a/src/main/java/com/itheima/reggie/filter/LoginCheckFilter.java	(revision b1e1a677ace81052e2312367d8acd895a813d719)
+++ b/src/main/java/com/itheima/reggie/filter/LoginCheckFilter.java	(date 1718113401738)
@@ -38,7 +38,11 @@
                 "/front/**",
                 "/common/**",
                 "/user/sendMsg",
-                "/user/login"
+                "/user/login",
+                "/doc.html",
+                "/webjars/**",
+                "/swagger-resources",
+                "/v2/api-docs"
         };
 
         boolean check = check(urls, requestURI);
